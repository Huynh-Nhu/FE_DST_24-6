import {
  faArrowUpRightFromSquare,
  faCaretDown,
  faCaretRight,
  faCircle,
  faCirclePlus,
  faClose,
  faEdit,
  faInfo,
  faPlusCircle,
  faQuestion,
  faSquarePlus,
  faTrash,
} from "@fortawesome/free-solid-svg-icons";
import Select from "react-select";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React, { useEffect, useRef, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useParams } from "react-router-dom";
import functions from "../../../redux/configs/functions";
import { act } from "react-dom/test-utils";
import { fi, id } from "date-fns/locale";
import { JoiningTable } from "./Components/JoiningTable";
import CreatableSelect from "react-select/creatable";
import { LinkCharts } from "./Components/Search";
import { List } from "immutable";
import { SelectDisplayFields } from "./Components/SelectDisplayFields";

export default function Properties() {
  const selectedCpn = useSelector((state) => state.selectedCpn);
  const selectedCpns = useSelector((state) => state.selectedCpns);
  const propertySet = useSelector((state) => state.propertySet);

  const [properties, setProperties] = useState(propertySet);

  useEffect(() => {
    const parent = selectedCpns.find((cpn) => cpn.id == selectedCpn.parent_id);
    if (parent) {
      const parents = selectedCpns?.slice(0, selectedCpns.length - 1);
      const filtedProperties = [];

      for (let i = 0; i < propertySet.length; i++) {
        const { onlyExistsIn } = propertySet[i];
        let valid = false;
        if (onlyExistsIn) {
          const directParent = onlyExistsIn.find(
            (c) => c.type == "direct" && c.name == parent.name
          );

          if (directParent) {
            valid = true;
          }

          const cascadingParents = onlyExistsIn.filter(
            (c) => c.type == "cascading"
          );
          const atleastOneParentIsCascading = parents.filter((par) => {
            const { name } = par;
            const isExisted = cascadingParents.find(
              (cpar) => cpar.name == name
            );
            return isExisted;
          });

          if (atleastOneParentIsCascading.length > 0) {
            valid = true;
          }

          if (valid) {
            filtedProperties.push(propertySet[i]);
          }
        } else {
          filtedProperties.push(propertySet[i]);
        }
      }
      setProperties(filtedProperties);
    } else {
      const filtedProperties = [];
      for (let i = 0; i < propertySet.length; i++) {
        const { onlyExistsIn } = propertySet[i];
        if (!onlyExistsIn) {
          filtedProperties.push(propertySet[i]);
        }
      }
      setProperties(filtedProperties);
    }
  }, [selectedCpn]);

  const dispatch = useDispatch();

  const getPropByPath = (path, object) => {
    const value = object[path[0]];
    if (path.length > 0 && value != undefined) {
      return getPropByPath(path.slice(1, path.length), value);
    } else {
      if (path.length == 0) {
        return object;
      } else {
        if (value == undefined) {
          return [];
        }
      }
    }
  };
  const setPropByPath = (object, path = [], value) => {
    if (path?.length == 1) {
      object = { ...object, [path[0]]: value };
    } else {
      try {
        object[path[0]] = setPropByPath(
          object[path[0]],
          path.slice(1, path.length),
          value
        );
      } catch (e) {}
    }
    return object;
  };

  const areParentActive = (childOf) => {
    if (childOf != undefined) {
      const { prop_id, caseIf } = childOf;
      const parent = propertySet.find((p) => p.id == prop_id);
      if (parent) {
        const { path } = parent;
        const value = getPropByPath(path.split("."), selectedCpn);
        if (value == caseIf) {
          return true;
        }
      }
      return false;
    }
    return true;
  };

  const updateSelectedComponent = (value, path) => {
    const newComp = setPropByPath(selectedCpn, path, value);

    dispatch({
      branch: "design-ui",
      type: "overideSelectedComp",
      payload: {
        component: newComp,
      },
    });
  };

  const setActiveComponent = (cpn) => {
    dispatch({
      branch: "design-ui",
      type: "setActiveComponent",
      payload: {
        id: cpn.id,
      },
    });
  };

  const getCpnById = () => {};

  return (
    <div className="properties">
      <div className="cpn-chain">
        {selectedCpns.slice(0, selectedCpns.length - 1).map((c, i) => (
          <div
            key={i}
            className="cpn"
            onClick={() => {
              setActiveComponent(c);
            }}
          >
            <span>{c.name?.toUpperCase()}</span>
            <span>
              <FontAwesomeIcon icon={faCaretRight} />
            </span>
          </div>
        ))}

        <div className="cpn">
          <span>{selectedCpn.name?.toUpperCase()}</span>
        </div>
      </div>

      {properties.map((prop, index) => {
        const { type } = prop;

        const Component = Components[type];
        if (Component != undefined) {
          return (
            <Component
              {...prop}
              index={properties.length - index + 2}
              selectedCpn={selectedCpn}
              updateSelectedComponent={updateSelectedComponent}
              getPropByPath={getPropByPath}
              areParentActive={areParentActive}
            />
          );
        } else {
          return null;
        }
      })}
      {/* {
                selectedCpn.id && <UnlinkComponent selectedCpn={selectedCpn} />
            } */}
    </div>
  );
}

const flatteningComponents = (components) => {
  const cpns = [];
  for (let i = 0; i < components.length; i++) {
    const { children } = components[i];
    cpns.push({ ...components[i], children: [] });
    if (children) {
      cpns.push(...flatteningComponents(children));
    }
  }
  return cpns;
};

const EntryBox = (props) => {
  const {
    label,
    path,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
    read_only,
  } = props;
  const splittedPath = path.split(".");

  return (
    <div className="property" style={{ zIndex: index }}>
      <div className="label-box">
        <span>{label}</span>
      </div>
      <div className="input-box">
        <input
          type="text"
          value={getPropByPath(splittedPath, selectedCpn)}
          onChange={(e) => {
            updateSelectedComponent(e.target.value, splittedPath);
          }}
          disabled={read_only}
        />
      </div>
    </div>
  );
};

const PattenEntry = (props) => {
  const {
    label,
    path,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
    read_only,
  } = props;

  const dispatch = useDispatch();

  const splittedPath = path.split(".");
  const value = getPropByPath(splittedPath, selectedCpn);

  const triggerInstruction = () => {
    dispatch({
      branch: "floating-boxes",
      type: "floatingTrigger",
    });
    dispatch({
      branch: "floating-boxes",
      type: "setBoxType",
      payload: {
        type: "patternGuideline",
      },
    });
  };

  const renderPreview = (value) => {
    const months = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L"];
    const date = new Date();
    const month = date.getMonth();
    const year = date.getFullYear().toString().slice(2, 4);
    return `${value}${months[month]}${year}00000000000`;
  };

  return (
    <div>
      <div className="property" style={{ zIndex: index }}>
        <div className="label-box">
          <span>{label}</span>
        </div>
        <div className="input-box">
          <input
            type="text"
            value={value}
            onChange={(e) => {
              updateSelectedComponent(e.target.value, splittedPath);
            }}
            disabled={read_only}
          />
        </div>
        <div className="infor-icon" onClick={triggerInstruction}>
          <FontAwesomeIcon icon={faQuestion} />
        </div>
      </div>
      {/* <div className="property">
        <div className="label-box">
          <span>Prefix</span>
        </div>
        <div className="input-box">
          <span
            style={
              value && value.length == 3 ? { color: "green" } : { color: "red" }
            }
          >
            {renderPrefix(value)}
          </span>
        </div>
      </div> */}
      <div className="property">
        <div className="label-box">
          <span>Xem trước</span>
        </div>
        <div className="input-box">
          <span
            style={
              value && value.length == 3 ? { color: "green" } : { color: "red" }
            }
          >
            {renderPreview(value)}
          </span>
        </div>
      </div>
    </div>
  );
};

const PrefixEntry = (props) => {
  const {
    label,
    path,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
    read_only,
  } = props;

  const splittedPath = path.split(".");
  const value = getPropByPath(splittedPath, selectedCpn);

  const renderPreview = (value) => {
    console.log(props);
    const months = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L"];
    const date = new Date();
    const month = date.getMonth();
    const year = date.getFullYear().toString().slice(2, 4);
    return `${value}${months[month]}${year}00000000000`;
  };

  return (
    <div>
      <div className="property" style={{ zIndex: index }}>
        <div className="label-box">
          <span>{label}</span>
        </div>
        <div className="input-box">
          <input
            type="text"
            value={value}
            onChange={(e) => {
              updateSelectedComponent(e.target.value, splittedPath);
            }}
            disabled={read_only}
          />
        </div>
      </div>
      <div className="property">
        <div className="label-box">
          <span>Xem trước</span>
        </div>
        <div className="input-box">
          <span style={{ color: "green", paddingLeft: "20px" }}>
            {renderPreview(value)}
          </span>
        </div>
      </div>
    </div>
  );
};
const NumberBox = (props) => {
  const {
    label,
    path,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;

  const splittedPath = path.split(".");
  return (
    <div className="property" style={{ zIndex: index }}>
      <div className="label-box">
        <span>{label}</span>
      </div>
      <div className="input-box">
        <input
          type="number"
          value={getPropByPath(splittedPath, selectedCpn)}
          onChange={(e) => {
            updateSelectedComponent(parseInt(e.target.value), splittedPath);
          }}
        />
      </div>
    </div>
  );
};

const IconicSwitchingGroup = (props) => {
  const {
    label,
    path,
    buttons,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;
  const splittedPath = path.split(".");
  const currentValue = getPropByPath(splittedPath, selectedCpn);

  return (
    <div className="property" style={{ zIndex: index }}>
      <div className="label-box">
        <span>{label}</span>
      </div>
      <div className="iconic-switches">
        {buttons.map((btn) => (
          <div
            className={`icon-switch-btn ${
              currentValue == btn.value ? " switch-activated " : ""
            }`}
            onClick={() => {
              updateSelectedComponent(btn.value, splittedPath);
            }}
          >
            <FontAwesomeIcon icon={btn.icon} />
          </div>
        ))}
      </div>
    </div>
  );
};

const IconicSwitching = (props) => {
  const {
    label,
    path,
    values,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    icon,
    index,
  } = props;

  const splittedPath = path.split(".");

  const currentValue = getPropByPath(splittedPath, selectedCpn);

  return (
    <div className="property" style={{ zIndex: index }}>
      <div className="label-box">
        <span>{label}</span>
      </div>
      <div
        className={`iconic-switch ${
          currentValue == values[1] ? "switch-activated" : ""
        }`}
        onClick={() => {
          updateSelectedComponent(
            currentValue == values[0] ? values[1] : values[0],
            splittedPath
          );
        }}
      >
        <FontAwesomeIcon icon={icon} />
      </div>
    </div>
  );
};

const Color = (props) => {
  const {
    label,
    path,
    values,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    icon,
    index,
  } = props;

  const splittedPath = path.split(".");

  const currentValue = getPropByPath(splittedPath, selectedCpn);

  return (
    <div className="property" style={{ zIndex: index }}>
      <div className="label-box">
        <span>{label}</span>
      </div>
      <div className={`color-box`}>
        <input
          type="color"
          className="color-input"
          value={currentValue}
          onChange={(e) => {
            updateSelectedComponent(e.target.value, splittedPath);
          }}
        />
      </div>
    </div>
  );
};

const Bool = (props) => {
  const {
    label,
    path,
    if_true,
    if_false,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;

  const splittedPath = path.split(".");

  const currentValue = getPropByPath(splittedPath, selectedCpn);

  const [drop, setDrop] = useState(false);

  let value = if_true;
  if (!currentValue) {
    value = if_false;
  }

  console.log("WTF", selectedCpn); // this is where it show the properties (values thinh)

  const options = [if_true, if_false];

  return (
    <div className="property" style={{ zIndex: index }}>
      <div className="label-box">
        <span>{label}</span>
      </div>
      <div className={`drop-box`}>
        <div
          className="content-container"
          onClick={() => {
            setDrop(!drop);
          }}
        >
          <div className={`content ${currentValue ? "true" : "false"}`}>
            <span>{value.label}</span>
          </div>
          <div className="caret">
            <FontAwesomeIcon icon={faCaretDown} />
          </div>
        </div>
        <div
          className="options-container"
          style={{ display: drop ? "block" : "none" }}
        >
          <div className="options">
            {options.map((opt) => (
              <div
                className="option"
                onClick={() => {
                  updateSelectedComponent(opt.value, splittedPath);
                  setDrop(false);
                }}
              >
                <span>{opt.label}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

const ChildSelection = (props) => {
  const {
    label,
    path,
    if_true,
    if_false,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    types,
    scope,
    index,
  } = props;

  const splittedPath = path.split(".");

  const currentValue = getPropByPath(splittedPath, selectedCpn);
  const [drop, setDrop] = useState(false);

  let options = [];
  const children = flatteningComponents(
    selectedCpn.children ? selectedCpn.children : []
  );
  if (scope == "cascade") {
    options = children.filter((c) => types[c.name] != undefined);
  } else {
    const children = selectedCpn.children ? selectedCpn.children : [];
    options = children.filter((c) => types[c.name] != undefined);
  }

  const selectedChild = children.find((c) => c.id == currentValue);

  const getLabel = (opt) => {
    const type = types[opt.name];
    let label = "";
    if (type) {
      const { display_value } = type;
      label = getPropByPath(display_value.split("."), opt);
    }
    return label;
  };

  return (
    <div className="property" style={{ zIndex: index }}>
      <div className="label-box">
        <span>{label}</span>
      </div>
      <div className={`drop-box`}>
        <div
          className="content-container"
          onClick={() => {
            setDrop(!drop);
          }}
        >
          <div className="content">
            <span>{selectedChild ? getLabel(selectedChild) : ""}</span>
          </div>
          <div className="caret">
            <FontAwesomeIcon icon={faCaretDown} />
          </div>
        </div>
        <div
          className="options-container"
          style={{ display: drop ? "block" : "none" }}
        >
          <div className="options">
            {options.map((opt) => (
              <div
                className="option"
                onClick={() => {
                  updateSelectedComponent(opt.id, splittedPath);
                  setDrop(false);
                }}
              >
                <span>{getLabel(opt)}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

const ApiSelection = (props) => {
  const proxy = useSelector((state) => state.proxy);
  const token = localStorage.getItem("_token");
  const {
    index,
    label,
    type,
    path,
    url,
    params,
    api_data,
    fields,
    display_value,

    getPropByPath,
    selectedCpn,
    updateSelectedComponent,

    childOf,
    areParentActive,
    sideFunction,
  } = props;

  const splittedPath = path.split(".");
  const PARAMS = useParams();
  const dispatch = useDispatch();

  const [options, setOptions] = useState([]);
  const [drop, setDrop] = useState(false);

  useEffect(() => {
    let fromatedURL = url;
    for (let i = 0; i < params.length; i++) {
      fromatedURL = fromatedURL.replaceAll(`[${params[i]}]`, PARAMS[params[i]]);
    }

    fetch(`${proxy}${fromatedURL}`, {
      method: "GET",
      headers: {
        Authorization: token,
      },
    })
      .then((res) => res.json())
      .then((res) => {
        const data = getPropByPath(api_data.split("."), res);
        if (data) {
          const formatedOptions = data.map((record) => {
            const object = {};

            for (let i = 0; i < fields?.length; i++) {
              const { from, to } = fields[i];
              object[to] = record[from];
            }
            return object;
          });
          setOptions(formatedOptions);
        } else {
          setOptions([]);
        }
      });
  }, []);

  const targetSelectTrigger = (opt) => {
    updateSelectedComponent(opt, splittedPath);

    if (sideFunction) {
      const payload = {};
      const { params } = sideFunction;

      for (let i = 0; i < params.length; i++) {
        const { from, param, translateTo } = params[i];

        if (from == "target") {
          payload[translateTo] = getPropByPath(param.split("."), opt);
        } else {
          payload[translateTo] = getPropByPath(param.split("."), selectedCpn);
        }
      }

      dispatch({
        branch: "side-funcs",
        type: sideFunction.name,
        payload,
      });
    }

    setDrop(false);
  };
  const getLabel = (opt) => {
    return opt[display_value];
  };

  if (areParentActive(childOf)) {
    return (
      <div className="property" style={{ zIndex: index }}>
        <div className="label-box">
          <span>{label}</span>
        </div>
        <div className={`drop-box`}>
          <div
            className="content-container"
            onClick={() => {
              setDrop(!drop);
            }}
          >
            <div className="content">
              <span>{getLabel(getPropByPath(splittedPath, selectedCpn))}</span>
            </div>
            <div className="caret">
              <FontAwesomeIcon icon={faCaretDown} />
            </div>
          </div>
          <div
            className="options-container"
            style={{ display: drop ? "block" : "none" }}
          >
            <div className="options">
              {options.map((opt) => (
                <div
                  className="option"
                  onClick={() => {
                    targetSelectTrigger(opt);
                  }}
                >
                  <span>{getLabel(opt)}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }
};

const ListSelection = (props) => {
  const {
    label,
    path,
    options,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;

  const splittedPath = path.split(".");

  const currentValue = getPropByPath(splittedPath, selectedCpn);

  const [drop, setDrop] = useState(false);

  let value = options.find((vl) => vl.value == currentValue);

  return (
    <div className="property" style={{ zIndex: index }}>
      <div className="label-box">
        <span>{label}</span>
      </div>
      <div className={`drop-box`}>
        <div
          className="content-container"
          onClick={() => {
            setDrop(!drop);
          }}
        >
          <div className="content">
            <span>{value?.label}</span>
          </div>
          <div className="caret">
            <FontAwesomeIcon icon={faCaretDown} />
          </div>
        </div>
        <div
          className="options-container"
          style={{ display: drop ? "block" : "none" }}
        >
          <div className="options">
            {options.map((opt) => (
              <div
                className="option"
                onClick={() => {
                  updateSelectedComponent(opt.value, splittedPath);
                  setDrop(false);
                }}
              >
                <span>{opt.label}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

const ChartSelection = (props) => {
  const {
    label,
    path,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
    read_only,
  } = props;

  const charts = [
    {
      value: "chart_1",
      content: "Biểu đồ cột ngang",
    },
    {
      value: "table_chart",
      content: "Biểu đồ bảng",
    },
  ];

  const splittedPath = path.split(".");
  const chart_type = getPropByPath(splittedPath, selectedCpn);

  return (
    <section>
      <label>{label}</label>
      <select
        onChange={({ target: { value } }) => {
          updateSelectedComponent(value, splittedPath);
        }}
      >
        {charts.map(({ value, content }) => (
          <option
            value={value}
            key={value}
            selected={chart_type === value ? true : false}
          >
            {content}
          </option>
        ))}
      </select>
    </section>
  );
};

const SelfSelection = (props) => {
  const {
    label,
    path,
    data,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
    fields,
    display_value,

    childOf,
    areParentActive,
  } = props;

  const splittedPath = path.split(".");
  const currentValue = getPropByPath(splittedPath, selectedCpn);
  const [drop, setDrop] = useState(false);

  const options = getPropByPath(data.split("."), selectedCpn);

  const formatObjectByFields = (opt) => {
    const clone = {};
    for (let i = 0; i < fields?.length; i++) {
      const { from, to } = fields[i];
      clone[to] = opt[from];
    }
    return clone;
  };
  if (areParentActive(childOf)) {
    return (
      <div className="property" style={{ zIndex: index }}>
        <div className="label-box">
          <span>{label}</span>
        </div>
        <div className={`drop-box`}>
          <div
            className="content-container"
            onClick={() => {
              setDrop(!drop);
            }}
          >
            <div className="content">
              <span>{currentValue?.[display_value]}</span>
            </div>
            <div className="caret">
              <FontAwesomeIcon icon={faCaretDown} />
            </div>
          </div>
          <div
            className="options-container"
            style={{ display: drop ? "block" : "none" }}
          >
            <div className="options">
              {options.map((opt) => (
                <div
                  className="option"
                  onClick={() => {
                    updateSelectedComponent(
                      formatObjectByFields(opt),
                      splittedPath
                    );
                    setDrop(false);
                  }}
                >
                  <span>{opt[display_value]}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }
};

const MasterSelection = (props) => {
  const {
    label,
    path,
    data,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,

    index,
    fields,
    display_value,

    childOf,
    areParentActive,
  } = props;

  const { selectedCpns } = useSelector((state) => state);

  const splittedPath = path.split(".");
  const currentValue = getPropByPath(splittedPath, selectedCpn);
  const [drop, setDrop] = useState(false);

  const parent = selectedCpns.find((p) => p.id == selectedCpn.parent_id);

  if (parent) {
    const options = getPropByPath(data.split("."), parent);

    const formatObjectByFields = (opt) => {
      const clone = {};
      for (let i = 0; i < fields?.length; i++) {
        const { from, to } = fields[i];
        clone[to] = opt[from];
      }
      return clone;
    };
    if (areParentActive(childOf)) {
      return (
        <div className="property" style={{ zIndex: index }}>
          <div className="label-box">
            <span>{label}</span>
          </div>
          <div className={`drop-box`}>
            <div
              className="content-container"
              onClick={() => {
                setDrop(!drop);
              }}
            >
              <div className="content">
                <span>{currentValue?.[display_value]}</span>
              </div>
              <div className="caret">
                <FontAwesomeIcon icon={faCaretDown} />
              </div>
            </div>
            <div
              className="options-container"
              style={{ display: drop ? "block" : "none" }}
            >
              <div className="options">
                {options.map((opt) => (
                  <div
                    className="option"
                    onClick={() => {
                      updateSelectedComponent(
                        formatObjectByFields(opt),
                        splittedPath
                      );
                      setDrop(false);
                    }}
                  >
                    <span>{opt[display_value]}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      );
    }
  }
};

const SelectTables = (props) => {
  const {
    label,
    path,
    fieldsPath,

    namePath,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;

  const localTables = useSelector((state) => state.tables);
  const [tables, setTables] = useState(localTables); // ủa gì dị
  const [drop, setDrop] = useState(false);
  const splittedPath = path.split(".");
  const selectedTables = getPropByPath(splittedPath, selectedCpn);

  const dispatch = useDispatch();

  useEffect(() => {
    if (selectedTables.length > 0) {
      const foreignKeys = [];
      for (let i = 0; i < selectedTables.length; i++) {
        foreignKeys.push(...(selectedTables[i].foreign_keys ?? []));
      }
      const validTablesId = foreignKeys.map((key) => key.table_id);
      const validTables = localTables.filter(
        (tb) => validTablesId.indexOf(tb.id) != -1
      );
      const selectedTablesId = selectedTables.map((tb) => tb.id);

      const finalTables = validTables.filter((tb) => {
        return selectedTablesId.indexOf(tb.id) == -1;
      });

      setTables(finalTables);
    } else {
      setTables(localTables);
    }
  }, [selectedTables]);

  const tableSelect = (table) => {
    setDrop(false);

    const newTables = [...selectedTables, table];
    if (newTables.length > 0) {
      const foreignKeys = [];
      for (let i = 0; i < newTables.length; i++) {
        foreignKeys.push(...newTables[i].foreign_keys);
      }
      const validTablesId = foreignKeys.map((key) => key.table_id);
      const validTables = localTables.filter(
        (tb) => validTablesId.indexOf(tb.id) != -1
      );
      const finalTables = validTables.filter(
        (tb) => newTables.indexOf(tb) == -1
      );

      setTables(finalTables);
    } else {
      setTables(localTables);
    }

    if (newTables.length == 1) {
      const { table_name } = newTables[0];
      updateSelectedComponent(table.fields, [
        "props",
        "source",
        "added_fields",
      ]);
      if (namePath) {
        updateSelectedComponent(table_name, namePath.split("."));
      }
    }

    updateSelectedComponent([...selectedTables, table], splittedPath);
  };

  useEffect(() => {
    if (selectedTables.length) {
      dispatch({
        branch: "side-funcs",
        type: "InitializeFormComponent",
        payload: {
          block_id: selectedCpn.id,
        },
      });
    }
  }, [selectedTables]);

  const removeLastTable = () => {
    const removedTable = selectedTables[selectedTables.length - 1];
    const newTables = selectedTables.slice(0, selectedTables.length - 1);

    if (newTables.length > 0) {
      const foreignKeys = [];
      for (let i = 0; i < newTables.length; i++) {
        foreignKeys.push(...newTables[i].foreign_keys);
      }
      const validTablesId = foreignKeys.map((key) => key.table_id);
      const validTables = localTables.filter(
        (tb) => validTablesId.indexOf(tb.id) != -1
      );
      const finalTables = validTables.filter(
        (tb) => newTables.indexOf(tb) == -1
      );
      console.log("leftFields", finalTables);

      setTables(finalTables);
    } else {
      setTables(localTables);
    }
    const currentFields = getPropByPath(fieldsPath.split("."), selectedCpn);
    console.log("???", currentFields);

    const leftFields = currentFields.filter(
      (f) => f.table_id != removedTable.id
    );
    updateSelectedComponent(leftFields, fieldsPath.split("."));
    updateSelectedComponent(newTables, splittedPath);
  };

  return (
    <div>
      <div className="property" style={{ zIndex: index }}>
        <div className="label-box">
          <span>{label}</span>
        </div>
        <div className={`drop-box`}>
          <div
            className="content-container"
            onClick={() => {
              setDrop(!drop);
            }}
          >
            <div className="content">
              <span></span>
            </div>
            <div className="caret">
              <FontAwesomeIcon icon={faCaretDown} />
            </div>
          </div>
          <div
            className="options-container"
            style={{ display: drop ? "block" : "none" }}
          >
            <div className="options">
              {tables.map((table) => (
                <div
                  className="option"
                  onClick={() => {
                    tableSelect(table);
                  }}
                >
                  <span>{table.table_name}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      <div className="property table-tag-list">
        {selectedTables.map((table, index) => (
          <div className="table-tag">
            <span>{table.table_name}</span>
            {index == selectedTables.length - 1 && (
              <span className="close" onClick={removeLastTable}>
                <FontAwesomeIcon icon={faClose} />
              </span>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};
const SelectChartTypes = (props) => {
  const {
    label,
    path,
    namePath,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
  } = props;

  const splittedPath = path.split(".");
  const { getFormatedUUID } = functions;
  const current = getPropByPath(["props", "charts"], selectedCpn);

  const key_fields = [];
  for (const k in selectedCpn?.props?.joiningTable?.select_root) {
    key_fields.push({
      id: Math.random(),
      fomular_alias: JSON.stringify(
        selectedCpn.props.joiningTable.select_root[k]
      ),
      field_name: k,
    });
  }

  const value_fields = key_fields;

  const [charts, setCharts] = useState(current);

  const handleValues = ({ chart_key, list_index, id, type, value }) => {
    setCharts((prev) => {
      const newCharts = { ...prev };
      newCharts[chart_key][list_index] = newCharts[chart_key][list_index].map(
        (oldChart) => {
          if (oldChart.id === id) {
            let values = oldChart.values;

            switch (type) {
              case "add":
                values.push({
                  id: getFormatedUUID(),
                  value: "",
                });
                break;
              case "delete":
                values = values.filter((i) => i.id !== value.id);
                break;
              case "update":
                values = values.map((item) => {
                  if (item.id === value.id) {
                    return value;
                  }
                  return item;
                });

                break;
              default:
                break;
            }

            return {
              ...oldChart,
              values,
            };
          }
          return oldChart;
        }
      );

      return newCharts;
    });
  };

  const handleUpdateKey = ({ value, id, chart_key, list_index }) => {
    setCharts((prev) => {
      const newCharts = { ...prev };
      newCharts[chart_key][list_index] = newCharts[chart_key][list_index].map(
        (oldChart) => {
          if (oldChart.id === id) {
            return {
              ...oldChart,
              key: value,
            };
          }
          return oldChart;
        }
      );

      return newCharts;
    });
  };

  function handleAddOutlet() {
    setCharts((prev) => [
      {
        id: getFormatedUUID(),
        type: "",
        key: {},
        values: [],
      },
      ...prev,
    ]);
  }

  function handleCharts({ type }) {
    switch (type) {
      case "add":
        handleAddOutlet();
        break;
      case "update":
        break;
      case "delete":
        break;
      default:
        break;
    }
  }

  useEffect(() => {
    setCharts(current);
  }, [current]);

  useEffect(() => {
    updateSelectedComponent(charts, ["props", "charts"]);
  }, [charts]);
  const options = key_fields.reduce(
    (prev, { id, fomular_alias, field_name }) => {
      if (!id) {
        return prev;
      }
      return [
        ...prev,
        {
          label: `${field_name}-${fomular_alias}`,
          value: `$${field_name}`,
        },
      ];
    },
    []
  );
  //charts
  return !selectedCpn?.props?.field?.length ? (
    <div style={{ padding: "1rem" }}>
      <div className="label-box mb-2">
        {label} <FontAwesomeIcon className="ml-1" icon={faCaretRight} />
      </div>
      <div className="fields-picker">
        <button
          onClick={() => {
            handleCharts({ type: "add" });
          }}
        >
          Add chart
        </button>
        {charts.map(({ id }) => (
          <section>
            {id}

            <CreatableSelect
              isClearable
              onChange={(option) => {
                // handleUpdateKey({
                //   value: option,
                //   chart_key: key,
                //   list_index: index,
                //   id: chart.id,
                // });
              }}
              options={options}
            />
          </section>
        ))}
        {ChartTypes.map(({ key, value }) => (
          <div class="form-check" value={key}>
            <input
              class="form-check-input"
              type="checkbox"
              value={key}
              checked={charts[key] ? true : false}
              onChange={({ target: { checked } }) => {
                setCharts((prev) => {
                  const newCharts = { ...prev };
                  if (!checked) {
                    delete newCharts[key];
                  } else {
                    newCharts[key] = [];
                  }
                  return newCharts;
                });
              }}
              id={key}
            />
            <section>
              <label class="form-check-label" for={key}>
                {value}
              </label>

              {charts[key] ? (
                <>
                  <FontAwesomeIcon
                    className="ml-2"
                    icon={faCirclePlus}
                    onClick={() => {
                      setCharts((prev) => {
                        const newCharts = { ...prev };
                        newCharts[key].push([
                          {
                            id: getFormatedUUID(),
                            key: "",
                            values: [],
                          },
                        ]);
                        return newCharts;
                      });
                    }}
                  />
                </>
              ) : null}
            </section>
            {charts[key]?.map((list = [], index) => (
              <section key={index}>
                <div className="label-box">Chart: {index}</div>
                <FontAwesomeIcon
                  icon={faCirclePlus}
                  onClick={() => {
                    setCharts((prev) => {
                      const newCharts = { ...prev };
                      newCharts[key][index].push({
                        id: getFormatedUUID(),
                        key: "",
                        values: [],
                      });
                      return newCharts;
                    });
                  }}
                />
                {list.map((chart) => {
                  return (
                    <section
                      style={{
                        border: "1px solid #ccc",
                        marginBottom: "10px",
                        padding: "5px",
                        borderRadius: "3%",
                      }}
                    >
                      <section>
                        <div className="lable-box mt-2">Key: </div>
                        <CreatableSelect
                          isClearable
                          value={chart.key}
                          onChange={(option) => {
                            handleUpdateKey({
                              value: option,
                              chart_key: key,
                              list_index: index,
                              id: chart.id,
                            });
                          }}
                          options={key_fields.reduce(
                            (prev, { id, fomular_alias, field_name }) => {
                              if (!id) {
                                return prev;
                              }
                              return [
                                ...prev,
                                {
                                  label: `${field_name}-${fomular_alias}`,
                                  value: `$${field_name}`,
                                },
                              ];
                            },
                            []
                          )}
                        />
                      </section>
                      <section>
                        <div className="label-box mt-2">Values: </div>

                        {chart?.values?.map((v) => (
                          <select
                            className="form-control mt-2"
                            onChange={({ target: { value } }) => {
                              handleValues({
                                chart_key: key,
                                list_index: index,
                                id: chart.id,
                                type: "update",
                                value: { ...v, value },
                              });
                            }}
                            key={v.id}
                          >
                            <option selected disabled></option>
                            {value_fields.map(
                              ({ id, fomular_alias, field_name }) => {
                                if (!id) {
                                  return null;
                                }
                                return (
                                  <option
                                    value={field_name}
                                    selected={
                                      field_name === v.value ? true : false
                                    }
                                  >
                                    {field_name}-{fomular_alias}
                                  </option>
                                );
                              }
                            )}
                          </select>
                        ))}

                        <FontAwesomeIcon
                          icon={faCirclePlus}
                          onClick={() => {
                            handleValues({
                              chart_key: key,
                              id: chart.id,
                              list_index: index,
                              type: "add",
                              value: "",
                            });
                          }}
                        />
                      </section>
                    </section>
                  );
                })}
              </section>
            ))}
          </div>
        ))}
      </div>
    </div>
  ) : null;
};
const SelectTable = (props) => {
  const {
    label,
    path,

    getPropByPath,
    updateSelectedComponent,
    selectedCpn,

    index,
    display_value,

    childOf,
    areParentActive,
  } = props;

  const { tables } = useSelector((state) => state);

  const splittedPath = path.split(".");
  const currentValue = getPropByPath(splittedPath, selectedCpn);
  const [drop, setDrop] = useState(false);

  const options = tables;

  if (areParentActive(childOf)) {
    return (
      <div className="property" style={{ zIndex: index }}>
        <div className="label-box">
          <span>{label}</span>
        </div>
        <div className={`drop-box`}>
          <div
            className="content-container"
            onClick={() => {
              setDrop(!drop);
            }}
          >
            <div className="content">
              <span>{currentValue?.[display_value]}</span>
            </div>
            <div className="caret">
              <FontAwesomeIcon icon={faCaretDown} />
            </div>
          </div>
          <div
            className="options-container"
            style={{ display: drop ? "block" : "none" }}
          >
            <div className="options">
              {options.map((opt) => (
                <div
                  className="option"
                  onClick={() => {
                    updateSelectedComponent(opt, splittedPath);
                    setDrop(false);
                  }}
                >
                  <span>{opt[display_value]}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }
};

const TableFieldsPicker = (props) => {
  const {
    path,
    label,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    tablespath,
    index,
  } = props;
  const splittedPath = path.split(".");

  const currentValue = getPropByPath(splittedPath, selectedCpn);
  const fomularAliases = currentValue.map((f) => f.fomular_alias);

  const tables = getPropByPath(tablespath.split("."), selectedCpn);
  const [isCollapse, setIsCollapse] = useState({});

  // thinh now
  const fieldSelectOrNot = (field) => {
    const isFieldSelected = currentValue.find(
      (f) => f.fomular_alias == field.fomular_alias
    );
    // thinh them hoac xoa khi check hoac uncheck trong fieldSelectOrNot vao truong prevFieldsAndCalculates
    let prevFieldsAndCalculates = selectedCpn?.props?.source?.display_fields;
    const itemIndex = prevFieldsAndCalculates.indexOf(field);
    console.log("this is prevFieldsAndCalculates", itemIndex);
    let newFieldsAndCalculates = prevFieldsAndCalculates;
    if (isFieldSelected) {
      newFieldsAndCalculates = prevFieldsAndCalculates.filter(
        (f) => f.fomular_alias != field.fomular_alias
      );
      // prevFieldsAndCalculates.splice(itemIndex+1, 1);
    } else {
      newFieldsAndCalculates.push(field);
    }
    updateSelectedComponent(newFieldsAndCalculates, [
      "props",
      "source",
      "display_fields",
    ]);

    let newValues = currentValue;
    if (isFieldSelected) {
      newValues = currentValue.filter(
        (f) => f.fomular_alias != field.fomular_alias
      );
    } else {
      newValues.push(field);
    }

    updateSelectedComponent(newValues, splittedPath);
  };

  const handleChangeDisplayName = (field, value) => {
    const newFields = [...currentValue];
    const field_selected = newFields.find(
      (f) => f.fomular_alias == field.fomular_alias
    );

    if (field_selected) {
      field_selected["DISPLAY_NAME"] = value;
    }

    updateSelectedComponent(newFields, splittedPath);
  };

  const handleCollapse = (id) => {
    setIsCollapse((prev) => ({ ...prev, [id]: !prev[id] }));
  };

  return (
    <div>
      <div className="property">
        {tables.length > 0 && (
          <div className="">
            <span>{label}</span>
          </div>
        )}
      </div>
      <div className="property" style={{ zIndex: index }}>
        <div className={"fields-picker"}>
          {tables.map((tb) => (
            <div className="table-fields-picker">
              <div
                className="fields-picker-header"
                onClick={() => {
                  handleCollapse(tb.id);
                }}
              >
                {/* ten bang thinh now */}
                <span>{tb.table_name}</span>
              </div>
              {isCollapse[tb.id] && (
                <div className="picker-field-list">
                  {tb.fields?.map((field) => (
                    <div className="field-picker">
                      <div className="picker-checkbox">
                        <input
                          type="checkbox"
                          checked={
                            fomularAliases.indexOf(field.fomular_alias) != -1
                          }
                          onClick={() => {
                            fieldSelectOrNot(field);
                          }}
                        />
                        {/* here */}
                      </div>

                      <div className="picker-label">
                        <span>
                          {field.field_name} - {field.fomular_alias}
                        </span>
                        <input
                          className="form-control"
                          type="text"
                          placeholder={field.DISPLAY_NAME}
                          defaultValue={field.DISPLAY_NAME}
                          onChange={({ target: { value } }) => {
                            handleChangeDisplayName(field, value);
                          }}
                        />
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

const SelectCriteria = (props) => {
  const {
    path,
    label,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    tablespath,
    index,
  } = props;
  const splittedPath = path.split(".");

  const currentValue = getPropByPath(splittedPath, selectedCpn);
  const fomularAliases = currentValue.map((f) => f.fomular_alias);
  const [criteria, setCriteria] = useState(currentValue);

  useEffect(() => {
    setCriteria(currentValue);
  }, [selectedCpn]);

  const { tables } = useSelector((s) => s);

  const handleChangeDisplayName = (field, value) => {
    const newFields = [...currentValue];
    const field_selected = newFields.find(
      (f) => f.fomular_alias == field.fomular_alias
    );

    if (field_selected) {
      field_selected["DISPLAY_NAME"] = value;
    }

    updateSelectedComponent(newFields, splittedPath);
  };

  const handleChangeCriteria = (tables, value, key, table) => {
    setCriteria((prev) => {
      const index = prev.findIndex((item) => item.key === key);
      if (index > -1) {
        prev[index].tables[table] = value;
      } else {
        prev.push({
          key,
          tables: {
            [table]: value,
          },
        });
      }
      updateSelectedComponent(prev, splittedPath);
      return prev;
    });
  };

  const handleRenderingByMappedTables = () => {
    const children = [];
    selectedCpn.props?.joiningTable?.tables?.map((table) => {
      const select_children = [];
      const key = `${table.left_table}-${table.right_table}`;
      tables.map((t) => {
        if (
          t.table_alias === table.left_table ||
          t.table_alias === table.right_table
        ) {
          const defaultValue =
            criteria
              .find((param) => param.key === key)
              ?.tables?.[t.table_alias]?.map(
                ({ field_name, fomular_alias }) => ({
                  label: `${field_name}-${fomular_alias}`,
                  value: fomular_alias,
                })
              ) || [];

          select_children.push(
            <section>
              <label>{t.table_alias}</label>
              <Select
                value={defaultValue}
                isMulti
                onChange={(option) => {
                  const mapped_option = [];
                  t.fields.map((field) => {
                    if (option.find((i) => i.value === field.fomular_alias)) {
                      mapped_option.push(field);
                    }
                  });

                  handleChangeCriteria(
                    currentValue,
                    mapped_option,
                    key,
                    t.table_alias
                  );
                }}
                options={t.fields.reduce((prev, field) => {
                  const { field_name, id, fomular_alias } = field;
                  if (!id) {
                    return prev;
                  }
                  return [
                    ...prev,
                    {
                      label: `${field_name}-${fomular_alias}`,
                      value: fomular_alias,
                    },
                  ];
                }, [])}
              />
            </section>
          );
        }
      });

      children.push(
        <section>
          <label>
            Bảng: {table.left_table}-{table.right_table}
          </label>
          {select_children}
        </section>
      );
    });

    return (
      <>
        <div className="property">
          <div className="">
            <span>{label}</span>
          </div>
        </div>
        <div className="property" style={{ zIndex: index }}>
          <div className={"fields-picker"}>{children}</div>
        </div>
      </>
    );
  };

  return <div>{handleRenderingByMappedTables()}</div>;
};

const SingularTableFieldsPicker = (props) => {
  const {
    path,

    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    tablepath,
    index,
  } = props;
  const splittedPath = path.split(".");

  const dispatch = useDispatch();

  const [tables, setTables] = useState([]);

  const currentValue = getPropByPath(splittedPath, selectedCpn);
  const fomularAliases = currentValue.map((f) => f.fomular_alias);
  const table = getPropByPath(tablepath.split("."), selectedCpn);

  useEffect(() => {
    if (table) {
      setTables([table]);
    }
  }, [table]);

  const fieldSelectOrNot = (field) => {
    const isFieldSelected = currentValue.find(
      (f) => f.fomular_alias == field.fomular_alias
    );

    let newValues = currentValue;
    if (isFieldSelected) {
      newValues = currentValue.filter(
        (f) => f.fomular_alias != field.fomular_alias
      );

      /**
       *  Remove coresponding component
       */

      const componentAboutToBeRemoved = selectedCpn.children?.find(
        (cpn) => cpn.field_id == field.id
      );
      if (componentAboutToBeRemoved) {
        dispatch({
          branch: "design-ui",
          type: "removeComponent",
          payload: {
            id: componentAboutToBeRemoved.id,
          },
        });
      }
    } else {
      /**
       *  Add component
       */

      dispatch({
        branch: "design-ui",
        type: "addFormField",
        payload: {
          form_id: selectedCpn.id,
          field,
        },
      });
      newValues.push(field);
    }
    updateSelectedComponent(newValues, splittedPath);
  };

  return (
    <div className="property" style={{ zIndex: index }}>
      <div className={"fields-picker"}>
        {tables.map(
          (tb) =>
            tb.fields && (
              <div className="table-fields-picker">
                <div className="fields-picker-header">
                  <span>{tb.table_name} </span>
                </div>
                <div className="picker-field-list">
                  {tb.fields?.map((field) => (
                    <div className="field-picker">
                      <div className="picker-checkbox">
                        <input
                          type="checkbox"
                          checked={
                            fomularAliases.indexOf(field.fomular_alias) != -1
                          }
                          onClick={() => {
                            fieldSelectOrNot(field);
                          }}
                        />
                      </div>

                      <div className="picker-label">
                        <span>
                          {field.field_name} - {field.fomular_alias}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )
        )}
      </div>
    </div>
  );
};

const TableCalculateFields = (props) => {
  const {
    path,
    label,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    tablespath,
    index,
  } = props;
  const { functions, proxy } = useSelector((state) => state);
  const token = localStorage.getItem("_token");
  const splittedPath = path.split(".");
  const currentValue = getPropByPath(splittedPath, selectedCpn);
  const fomularAliases = currentValue.map((f) => f.fomular_alias);
  const [focusFieldId, setFocusField] = useState("");
  const { version_id } = useParams();
  // const [list, setList] = useState(selectedCpn?.props?.source?.fields);
  // const [calculateList, setCalculateList] = useState(selectedCpn?.props?.source?.calculates);
  const [calculateList, setCalculateList] = useState(
    selectedCpn?.props?.source?.calculates
  );
  console.log("this is calculateList", calculateList);
  const [list, setList] = useState(selectedCpn?.props?.source?.fields);
  // const [calculateList, setCalculateList] = useState(calculates);

  // thinh gop 2 mang calculates and fields thanh 1 mang tong display_fields
  const fieldsAndCalculates = list?.concat(calculateList);
  // nay la goi du lieu va truyen ve "props", "source", "display_fields" neu chua co
  useEffect(() => {
    const test = selectedCpn?.props?.source?.display_fields;
    if (test) {
      return;
    }
    updateSelectedComponent(fieldsAndCalculates, [
      "props",
      "source",
      "display_fields",
    ]);
  }, []);

  console.log("this is list", fieldsAndCalculates);
  console.log("this is calculate", calculateList);
  console.log("this is current Value", currentValue);

  // const table = getPropByPath(tablespath.split("."), selectedCpn);

  // useEffect(() => {
  //   if (table) {
  //     setTables([table]);
  //   }
  // }, [table]);
  // // can sua now
  // console.log("sdada", selectedCpn?.props?.source?.fields);
  const makeCloneField = () => {
    const newCalculate = {
      id: functions.getFormatedUUID(),
      display_name: "",
      fomular_alias: "",
      fomula: "",
      DATATYPE: "",
      checked: false,
    };

    updateSelectedComponent([...currentValue, newCalculate], splittedPath);
  };

  const fieldChangeName = (field, newName) => {
    const fields = currentValue;
    const newFields = fields.map((f) => {
      if (f.id == field.id) {
        f.display_name = newName;
      }
      return f;
    });

    updateSelectedComponent(newFields, splittedPath);
    // updateSelectedComponent([...newFields], ['props', 'source', 'fields']);
  };

  const fieldChangeFomular = (field, fomular) => {
    const fields = currentValue;
    const newFields = fields.map((f) => {
      if (f.id == field.id) {
        f.fomular = fomular;
      }
      return f;
    });

    updateSelectedComponent(newFields, splittedPath);
  };

  const isFieldFocused = (id) => {
    return id == focusFieldId;
  };

  const recordFocusing = (field) => {
    const { id } = field;
    setFocusField(id);
  };

  const regenerateAlias = async (field) => {
    let display_name = field.display_name;

    if (!display_name || display_name.length == 0) {
      display_name = "Trường mới";
      fieldChangeName(field, display_name);
    }

    const response = await fetch(`${proxy}/apis/make/alias`, {
      method: "POST",
      headers: {
        Authorization: token,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ version_id, field_name: display_name }),
    });
    const data = await response.json();
    const alias = data.alias;
    const newFields = currentValue.map((f) => {
      if (f.id == field.id) {
        f.fomular_alias = alias;
      }
      return f;
    });
    // setSelectedItems(newFields)
    console.log("newFields", newFields);

    updateSelectedComponent(newFields, splittedPath);
    // updateSelectedComponent(newFields, ["props", "source", "fields"]);
  };

  // const fieldSelectOrNot = (e, field) => {
  //   let prev = list;
  //   let itemIndex = prev.indexOf(field);

  //   if (itemIndex !== -1) {
  //     prev.splice(itemIndex, 1);
  //   } else {
  //     prev.push(field);
  //   }
  //   setList(prev);
  //   console.log("sass", prev);
  //   updateSelectedComponent(prev, ["props", "source", "fields"]);
  // };

  // thinh viet ham check box cho calculate
  const calculateSelectOrNot = (field) => {
    // let itemIndex = prev.indexOf(field);

    // if (itemIndex !== -1) {
    //   prev.splice(itemIndex, 1);
    // } else {
    //   prev.push(field);
    // }
    // move index display_fields
    // let itemIndex = prev.indexOf(field);
    // prev.splice(itemIndex, 1)
    // prev.push(field);
    // console.log("this is itemIndex",itemIndex);
    // end move index
    // updateSelectedComponent(display_fields, ["props", "source", "display_fields"]);
    // const [display_fields, setCalculateList] = useState(selectedCpn?.props?.source?.display_fields);
    // const isFieldSelected = currentValue.find(
    //   (f) => f.fomular_alias == field.fomular_alias
    // );

    // thinh them truong hop xoa trong prevFieldsAndCalculates cua calculateSelectOrNot
    let prevFieldsAndCalculates = selectedCpn?.props?.source?.display_fields;
    const itemIndex = prevFieldsAndCalculates.indexOf(field);
    console.log("this is prevFieldsAndCalculates", itemIndex);
    let newFieldsAndCalculates = prevFieldsAndCalculates;
    if (field.checked === true) {
      newFieldsAndCalculates = prevFieldsAndCalculates.filter(
        (f) => f.fomular_alias != field.fomular_alias
      );
      // prevFieldsAndCalculates.splice(itemIndex+1, 1);
    } else {
      newFieldsAndCalculates.push(field);
    }
    updateSelectedComponent(newFieldsAndCalculates, [
      "props",
      "source",
      "display_fields",
    ]);

    console.log("this is currentValue", currentValue);
    let prev = currentValue;
    field.checked = !field.checked;

    setCalculateList(prev);
    console.log("sass", prev);
    updateSelectedComponent(prev, splittedPath);
  };

  const removeField = (field) => {
    // thinh them truong hop xoa trong prevFieldsAndCalculates
    let prevFieldsAndCalculates = selectedCpn?.props?.source?.display_fields;
    let newFieldsAndCalculates = prevFieldsAndCalculates;
    newFieldsAndCalculates = prevFieldsAndCalculates.filter((f) => {
      return f.fomular_alias != field.fomular_alias;
    });

    updateSelectedComponent(newFieldsAndCalculates, [
      "props",
      "source",
      "display_fields",
    ]);

    const fields = currentValue;
    const newFields = fields.filter((f) => {
      return f.fomular_alias != field.fomular_alias;
    });

    // updateSelectedComponent(newFields, ["props", "source", "fields"]);
    updateSelectedComponent(newFields, splittedPath);
  };

  return (
    <div className="property" style={{ zIndex: index }}>
      <div className={"fields-picker"}>
        <div className="table-fields-picker">
          <div className="fields-picker-header">
            <span>{label}</span>
            <div className="add-icon" onClick={makeCloneField}>
              <FontAwesomeIcon icon={faPlusCircle} />
            </div>
          </div>
          <div className="dynamic-field-list">
            <table>
              {/* thinh this is where to fix */}
              <thead className="field-record">
                <th>1</th>
                <th className="record-prop display-name m-0 p-1">
                  Tên hiển thị
                </th>
                <th className="record-prop fomular-alias m-0 p-1">Bí danh</th>
                <th className="record-prop fomular m-0 p-1">Công thức tính</th>
                <th className="trash"></th>
              </thead>
              <tbody>
                {currentValue.map((field) => (
                  <tr
                    className={`field-record ${
                      isFieldFocused(field.id) && "field-focus"
                    }`}
                    onClick={() => {
                      recordFocusing(field);
                    }}
                  >
                    {/* thinh them phan check box o day, goi ham calculateSelectOrNot va check xem checked is true or not */}
                    <td>
                      <div className="picker-checkbox">
                        <input
                          type="checkbox"
                          checked={field.checked === true}
                          onClick={() => {
                            calculateSelectOrNot(field);
                          }}
                        />
                        {/* here */}
                      </div>
                    </td>
                    <td className="record-prop">
                      {/* <input
                        type="checkbox"
                        // checked={
                        //   fomularAliases.indexOf(field.fomular_alias) != -1
                        // }
                        // checked={initialList[field] ? false : true}
                        checked={list.includes(field)}
                        onClick={() => {
                          fieldSelectOrNot(field);
                        }}
                      /> */}
                    </td>
                    <td className="record-prop display-name">
                      <input
                        type="text"
                        onBlur={() => {
                          regenerateAlias(field);
                        }}
                        onChange={(e) => {
                          fieldChangeName(field, e.target.value);
                        }}
                        value={field.display_name || field.field_name}
                      />
                    </td>
                    {/* bi danh */}
                    <td className="record-prop fomular-alias">
                      <span>{field.fomular_alias}</span>
                    </td>
                    <td className="record-prop fomular">
                      <input
                        type="text"
                        onChange={(e) => {
                          fieldChangeFomular(field, e.target.value);
                        }}
                        value={field.fomular}
                      />
                    </td>
                    <td
                      className="trash"
                      onClick={() => {
                        removeField(field);
                      }}
                    >
                      {isFieldFocused(field.id) && (
                        <FontAwesomeIcon icon={faTrash} />
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

const PrimaryTableOnlyBool = (props) => {
  const {
    label,
    path,
    tablesPath,
    data,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
    fields,
    display_value,
    childOf,
    areParentActive,
  } = props;

  const splittedPath = path.split(".");
  const splittedTablesPath = tablesPath.split(".");
  const splittedFieldsPath = data.split(".");

  const currentTables = getPropByPath(splittedTablesPath, selectedCpn);
  const currentFields = getPropByPath(splittedFieldsPath, selectedCpn);

  const currentValue = getPropByPath(splittedPath, selectedCpn);

  const [drop, setDrop] = useState(false);
  const [options, setOptions] = useState([]);

  useEffect(() => {
    const options = getPropByPath(data.split("."), selectedCpn);

    const firstTable = currentTables[0];
    if (firstTable) {
      const filtedOptions = options.filter(
        (opt) => opt.table_id == firstTable.id
      );
      const boolFields = filtedOptions.filter(
        (opt) => opt.props.DATATYPE == "BOOL"
      );
      setOptions(boolFields);
    }
  }, [JSON.stringify(currentTables), JSON.stringify(currentFields)]);

  const formatObjectByFields = (opt) => {
    const clone = {};
    for (let i = 0; i < fields?.length; i++) {
      const { from, to } = fields[i];
      clone[to] = opt[from];
    }
    return clone;
  };
  if (areParentActive(childOf)) {
    return (
      <div className="property" style={{ zIndex: index }}>
        <div className="label-box">
          <span>{label}</span>
        </div>
        <div className={`drop-box`}>
          <div
            className="content-container"
            onClick={() => {
              setDrop(!drop);
            }}
          >
            <div className="content">
              <span>{currentValue?.[display_value]}</span>
            </div>
            <div className="caret">
              <FontAwesomeIcon icon={faCaretDown} />
            </div>
          </div>
          <div
            className="options-container"
            style={{ display: drop ? "block" : "none" }}
          >
            <div className="options">
              {options.map((opt) => (
                <div
                  className="option"
                  onClick={() => {
                    updateSelectedComponent(
                      formatObjectByFields(opt),
                      splittedPath
                    );
                    setDrop(false);
                  }}
                >
                  <span>{opt[display_value]}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }
};

const MethodTypes = [
  {
    key: "SELECT",
    value: "SELECT",
  },
  {
    key: "COUNT",
    value: "COUNT",
  },
  {
    key: "SUM",
    value: "SUM",
  },
  {
    key: "AVERAGE",
    value: "AVERAGE",
  },
];

const ChartTypes = [
  {
    key: "VerticalLineChart",
    value: "Vertical Line Chart",
  },
  {
    key: "HorizontalLineChart",
    value: "Horizontal Line Chart",
  },
  {
    key: "CircleChart",
    value: "Circle Chart",
  },
];

const SingleFieldSelection = (props) => {
  const {
    path,
    data,

    label,

    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;

  const tablespath = data;

  const splittedPath = path.split(".");

  const currentValue = Array.isArray(getPropByPath(splittedPath, selectedCpn))
    ? getPropByPath(splittedPath, selectedCpn)
    : [getPropByPath(splittedPath, selectedCpn)];

  const type_component = selectedCpn.name;
  const tables = getPropByPath(tablespath.split("."), selectedCpn);
  const [isCollapse, setIsCollapse] = useState({});
  const fieldSelectOrNot = (field) => {
    let isExist = false;
    let newFields = [...currentValue];

    newFields = currentValue.filter((prev) => {
      if (prev.id === field.id) {
        isExist = true;
        return false;
      }
      return true;
    });

    if (isExist === false) {
      field.METHOD_TYPE = "SELECT";
      newFields.push(field);
    }
    updateSelectedComponent(newFields, splittedPath);
  };

  const handleParams = (field, key, value) => {
    const newFields = currentValue.map((prev) => {
      if (prev.id === field.id) {
        return { ...prev, [key]: value };
      }
      return prev;
    });

    updateSelectedComponent(newFields, splittedPath);
  };

  const handleCollapse = (id) => {
    setIsCollapse((prev) => ({ ...prev, [id]: !prev[id] }));
  };

  return (
    <div>
      <div className="property">
        {tables.length > 0 && (
          <div className="">
            <span>{label}</span>
          </div>
        )}
      </div>
      <div className="property" style={{ zIndex: index }}>
        <div className={"fields-picker"}>
          {tables.map((tb, i) => (
            <div className="table-fields-picker">
              <div
                className="fields-picker-header"
                onClick={() => {
                  handleCollapse(tb.id);
                }}
              >
                <span>{tb.table_name}</span>
              </div>
              {isCollapse[tb.id] && (
                <div className="picker-field-list">
                  {tb.fields?.map((field) => (
                    <section>
                      <div className="field-picker">
                        <div className="picker-checkbox">
                          <input
                            type="checkbox"
                            checked={
                              currentValue.find(
                                (item) =>
                                  item.fomular_alias === field.fomular_alias
                              )
                                ? true
                                : false
                            }
                            onClick={() => {
                              fieldSelectOrNot(field);
                            }}
                          />
                        </div>

                        <div className="picker-label">
                          <span>
                            {field.field_name} - {field.fomular_alias}
                          </span>
                        </div>
                      </div>
                      {currentValue.find(
                        (item, i) => item.fomular_alias === field.fomular_alias
                      ) ? (
                        <React.Fragment key={i}>
                          <section>
                            <div>Phép toán:</div>
                            <select
                              class="form-select"
                              aria-label="Default select example"
                              onChange={({ target: { value } }) => {
                                if (value) {
                                  handleParams(field, "METHOD_TYPE", value);
                                }
                              }}
                            >
                              <option disabled selected></option>
                              {MethodTypes.map(({ key, value }) => (
                                <option
                                  value={key}
                                  selected={
                                    currentValue.find(
                                      (item) =>
                                        item.fomular_alias ===
                                        field.fomular_alias
                                    )?.METHOD_TYPE === key
                                      ? true
                                      : false
                                  }
                                >
                                  {value}
                                </option>
                              ))}
                            </select>
                          </section>
                        </React.Fragment>
                      ) : null}
                    </section>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

const SelectParams = (props) => {
  const { page } = useSelector((state) => state);
  const { params } = page;

  const {
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,

    label,
    type,
    path,
    tablespath,
  } = props;

  const tables = getPropByPath(tablespath.split("."), selectedCpn);
  const fields = [];
  tables.map((tb) => {
    fields.push(...tb.fields);
  });

  const validParams = params.filter((param) => {
    const isParamSelected = fields.find(
      (f) => f.fomular_alias == param.fomular_alias
    );
    return isParamSelected;
  });

  const currentValue = getPropByPath(path.split("."), selectedCpn);

  const isFieldPicked = (field) => {
    const selected = currentValue.find(
      (f) => f.fomular_alias == field.fomular_alias
    );
    return selected ? true : false;
  };

  const fieldSelectOrNot = (field) => {
    const isPicked = isFieldPicked(field);

    if (isPicked) {
      const newParamsSet = currentValue.filter(
        (p) => p.fomular_alias != field.fomular_alias
      );
      updateSelectedComponent(newParamsSet, path.split("."));
    } else {
      updateSelectedComponent([...currentValue, field], path.split("."));
    }
  };

  return (
    <div>
      <div className="property">
        <div className="">
          <span>{label}</span>
        </div>
      </div>
      <div className="property" style={{ zIndex: index }}>
        <div className={"fields-picker"}>
          <div className="table-fields-picker">
            <div className="picker-field-list">
              {validParams.map((field) => (
                <div className="field-picker">
                  <div className="picker-checkbox">
                    <input
                      type="checkbox"
                      checked={isFieldPicked(field)}
                      onClick={() => {
                        fieldSelectOrNot(field);
                      }}
                    />
                  </div>

                  <div className="picker-label">
                    <span>
                      {field.field_name} - {field.fomular_alias}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

const SelectPage = (props) => {
  const {
    index,
    label,
    path,
    fields,
    childOf,
    areParentActive,
    display_value,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
  } = props;

  const { pages } = useSelector((state) => state);

  const flatteningPages = (pages) => {
    /**
     * Ép dẹp cây component thành mảng các component cùng cấp
     */

    const cpns = [];
    for (let i = 0; i < pages.length; i++) {
      const { children } = pages[i];
      cpns.push({ ...pages[i] });
      if (children) {
        cpns.push(...flatteningPages(children));
      }
    }
    return cpns;
  };

  const splittedPath = path.split(".");
  const currentValue = getPropByPath(splittedPath, selectedCpn);
  const [drop, setDrop] = useState(false);

  const options = flatteningPages(pages);

  const formatObjectByFields = (opt) => {
    const clone = {};
    for (let i = 0; i < fields?.length; i++) {
      const { from, to } = fields[i];
      clone[to] = opt[from];
    }
    console.log(clone);
    return clone;
  };
  if (areParentActive(childOf)) {
    return (
      <div className="property" style={{ zIndex: index }}>
        <div className="label-box">
          <span>{label}</span>
        </div>
        <div className={`drop-box`}>
          <div
            className="content-container"
            onClick={() => {
              setDrop(!drop);
            }}
          >
            <div className="content">
              <span>{currentValue?.[display_value]}</span>
            </div>
            <div className="caret">
              <FontAwesomeIcon icon={faCaretDown} />
            </div>
          </div>
          <div
            className="options-container"
            style={{ display: drop ? "block" : "none" }}
          >
            <div className="options">
              {options.map((opt) => (
                <div
                  className="option"
                  onClick={() => {
                    updateSelectedComponent(
                      formatObjectByFields(opt),
                      splittedPath
                    );
                    setDrop(false);
                  }}
                >
                  <span>{opt[display_value]}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }
};
const SelectDisplayField = (props) => {
  const { getPropByPath, selectedCpn, path, updateSelectedComponent } = props;
  const { foreign_fields = [] } = selectedCpn;
  const displayField = getPropByPath(path.split("."), selectedCpn);

  const [fields, setFields] = useState(displayField);
  useEffect(() => {
    setFields(displayField);
  }, [displayField]);

  const handleChangeDisplayField = (value) => {
    updateSelectedComponent(value, path.split("."));
  };

  return (
    <section>
      <label>Trường hiển thị</label>

      <Select
        value={fields}
        isMulti
        name="colors"
        onChange={(value) => {
          handleChangeDisplayField(value);
        }}
        options={foreign_fields.map(({ id, field_name, fomular_alias }) => ({
          value: fomular_alias,
          label: `${field_name}-${fomular_alias}`,
        }))}
        className="basic-multi-select"
        classNamePrefix="select"
      />
    </section>
  );
};
const ShowParams = (props) => {
  const {
    path,
    label,

    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;

  const params = getPropByPath(path.split("."), selectedCpn);

  return (
    <div className="property" style={{ zIndex: index }}>
      <div className="label-box">
        <span>{label}</span>
      </div>

      <div className="params-list">
        {params.map((p, index) => (
          <div className="param-record">
            <span>
              {index + 1}. {p.field_name} - {p.fomular_alias}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};

const ChooseSlave = (props) => {
  const {
    type,
    path,
    master,
    primary_key,
    display_value,
    fields,

    label,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;

  const primaryKey = primary_key;

  const { tables, selectedCpns } = useSelector((state) => state);

  const parent = selectedCpns.find((cpn) => cpn.id == selectedCpn.parent_id);
  const [drop, setDrop] = useState(false);
  if (parent) {
    const parentTables = getPropByPath(master.split("."), parent);

    const primalTable = parentTables[0];

    const slaveTables = tables.filter((tb) => {
      const { foreign_keys } = tb;
      const existedForeignKey = foreign_keys.find((key) => {
        const { table_id } = key;
        return table_id == primalTable.id;
      });
      return existedForeignKey;
    });

    const splittedPath = path.split(".");
    const currentValue = getPropByPath(splittedPath, selectedCpn);

    const formatObjectByFields = (opt) => {
      const clone = {};
      for (let i = 0; i < fields?.length; i++) {
        const { from, to } = fields[i];
        clone[to] = opt[from];
      }
      return clone;
    };

    /**
     *
     * tìm tất cả bản phụ thuộc r chọn nó ở đây
     *
     */

    const clickTrigger = (opt) => {
      const { primary_key, fields } = primalTable;

      const pKey = primary_key[0];

      const primaryField = fields.find((f) => f.id == pKey);

      updateSelectedComponent(primaryField, primaryKey.split("."));
      setDrop(false);
      updateSelectedComponent(formatObjectByFields(opt), splittedPath);
    };

    return (
      <div className="property" style={{ zIndex: index }}>
        <div className="label-box">
          <span>{label}</span>
        </div>
        <div className={`drop-box`}>
          <div
            className="content-container"
            onClick={() => {
              setDrop(!drop);
            }}
          >
            <div className="content">
              <span>{currentValue?.[display_value]}</span>
            </div>
            <div className="caret">
              <FontAwesomeIcon icon={faCaretDown} />
            </div>
          </div>
          <div
            className="options-container"
            style={{ display: drop ? "block" : "none" }}
          >
            <div className="options">
              {slaveTables.map((opt) => (
                <div
                  className="option"
                  onClick={() => {
                    clickTrigger(opt);
                  }}
                >
                  <span>{opt[display_value]}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return;
};

const ChooseMaster = (props) => {
  const {
    path,
    table_path,
    label,
    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    areParentActive,
    childOf,

    index,
  } = props;

  const display_value = "table_name";

  const { tables } = useSelector((state) => state);

  const splittedPath = path.split(".");
  const currentValue = getPropByPath(splittedPath, selectedCpn);
  const [drop, setDrop] = useState(false);

  const table = getPropByPath(table_path.split("."), selectedCpn);

  if (table && table.foreign_keys) {
    const { foreign_keys } = table;
    const refTableIds = foreign_keys.map((key) => key.table_id);

    const options = tables.filter(
      (table) => refTableIds.indexOf(table.id) != -1
    );

    if (areParentActive(childOf)) {
      return (
        <div className="property" style={{ zIndex: index }}>
          <div className="label-box">
            <span>{label}</span>
          </div>
          <div className={`drop-box`}>
            <div
              className="content-container"
              onClick={() => {
                setDrop(!drop);
              }}
            >
              <div className="content">
                <span>{currentValue?.[display_value]}</span>
              </div>
              <div className="caret">
                <FontAwesomeIcon icon={faCaretDown} />
              </div>
            </div>
            <div
              className="options-container"
              style={{ display: drop ? "block" : "none" }}
            >
              <div className="options">
                {options.map((opt) => (
                  <div
                    className="option"
                    onClick={() => {
                      updateSelectedComponent(opt, splittedPath);
                      setDrop(false);
                    }}
                  >
                    <span>{opt[display_value]}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      );
    }
  }
  return;
};

const ButtonChangeIcon = (props) => {
  const {
    label,
    path,

    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;

  const dispatch = useDispatch();

  const { icons } = useSelector((state) => state);

  const splittedPath = path.split(".");
  const currentValue = getPropByPath(splittedPath, selectedCpn);

  const renderIcon = (icon) => {
    return icons[icon]?.icon;
  };

  const changeIconTrigger = () => {
    dispatch({
      branch: "floating-boxes",
      type: "floatingTrigger",
    });

    dispatch({
      branch: "floating-boxes",
      type: "setBoxType",
      payload: {
        type: "customButtonChangeIcon",
      },
    });
  };

  return (
    <div className="property" style={{ zIndex: index }}>
      <div className="label-box">
        <span>{label}</span>
      </div>
      <div className={`drop-box`}>
        <div className="icon-preview" onClick={changeIconTrigger}>
          <FontAwesomeIcon icon={renderIcon(currentValue)} />
        </div>
      </div>
    </div>
  );
};

const ChoosePreImportTable = (props) => {
  const {
    label,
    optionslabel,

    fieldPath,
    valuePath,
    masterTables,

    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;

  const { version_id } = useParams();
  const _token = localStorage.getItem("_token");
  const { tables, selectedCpns, proxy } = useSelector((state) => state);

  const parent = selectedCpns.find((cpn) => cpn.id == selectedCpn.parent_id);
  const [drop, setDrop] = useState(false);
  const [optionDrop, setOptionDrop] = useState(false);

  const [fTable, setFTable] = useState(undefined);

  const [options, setOptions] = useState([]);

  useEffect(() => {
    const InitFunc = async () => {
      const field = getPropByPath(fieldPath.split("."), selectedCpn);
      const { table_id } = field;

      if (table_id) {
        const table = tables.find((tb) => tb.id == table_id);
        setFTable(table);
        updateSelectedComponent(field, fieldPath.split("."));
        // updateSelectedComponent({}, valuePath.split('.'))

        setDrop(false);

        const res = await fetch(
          `${proxy}/db/preimport/${version_id}/${table.id}`,
          {
            headers: {
              Authorization: _token,
            },
          }
        );
        const data = await res.json();
        // console.log(data)
        setOptions(data.data);
      }
    };
    InitFunc();
    return () => {};
  }, []);

  const fieldClickTrigger = async (field) => {
    const { table_id } = field;
    const table = tables.find((tb) => tb.id == table_id);
    setFTable(table);
    updateSelectedComponent(field, fieldPath.split("."));
    updateSelectedComponent({}, valuePath.split("."));

    setDrop(false);

    const res = await fetch(`${proxy}/db/preimport/${version_id}/${table.id}`, {
      headers: {
        Authorization: _token,
      },
    });
    const data = await res.json();
    console.log(data);
    setOptions(data.data);
  };

  if (parent) {
    const currentField = getPropByPath(fieldPath.split("."), selectedCpn);
    const currentValue = getPropByPath(valuePath.split("."), selectedCpn);
    const fields = [];
    const parentTables = getPropByPath(masterTables.split("."), parent);
    parentTables.map((tb) => {
      const { foreign_keys } = tb;

      const foreignKeyFieldsID = foreign_keys.map((key) => key.field_id);
      const thisTableFields = Object.values(tb.fields);

      const foreignFields = thisTableFields
        .filter((f) => foreignKeyFieldsID.indexOf(f.id) != -1)
        .map((field) => {
          const { id } = field;
          const corespondingKey = foreign_keys.find(
            (key) => key.field_id == id
          );

          const foreignTable = tables.find(
            (tbl) => tbl.id == corespondingKey.table_id
          );

          if (foreignTable.pre_import) {
            return {
              ...field,
              table_id: corespondingKey.table_id,
              onTable: tb.id,
            };
          }
        })
        .filter((f) => f != undefined);

      fields.push(...foreignFields);
    });

    const valueClickTrigger = (opt) => {
      updateSelectedComponent(opt, valuePath.split("."));
      setOptionDrop(false);
    };

    return (
      <div>
        <div className="property" style={{ zIndex: index + 1 }}>
          <div className="label-box">
            <span>{label}</span>
          </div>
          <div className={`drop-box`}>
            <div
              className="content-container"
              onClick={() => {
                setDrop(!drop);
              }}
            >
              <div className="content">
                <span>
                  {currentField.field_name}-{currentField.fomular_alias}
                </span>
              </div>
              <div className="caret">
                <FontAwesomeIcon icon={faCaretDown} />
              </div>
            </div>
            <div
              className="options-container"
              style={{ display: drop ? "block" : "none" }}
            >
              <div className="options">
                {fields.map((opt) => (
                  <div
                    className="option"
                    onClick={() => {
                      fieldClickTrigger(opt);
                    }}
                  >
                    <span>
                      {opt["field_name"]}-{opt.fomular_alias}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        {fTable && (
          <div className="property" style={{ zIndex: index }}>
            <div className="label-box">
              <span>{optionslabel}</span>
            </div>
            <div className={`drop-box`}>
              <div
                className="content-container"
                onClick={() => {
                  setOptionDrop(!optionDrop);
                }}
              >
                <div className="content">
                  <span>{Object.values(currentValue).join(" - ")}</span>
                </div>
                <div className="caret">
                  <FontAwesomeIcon icon={faCaretDown} />
                </div>
              </div>
              <div
                className="options-container"
                style={{ display: optionDrop ? "block" : "none" }}
              >
                <div className="options">
                  {options.map((opt) => (
                    <div
                      className="option"
                      onClick={() => {
                        valueClickTrigger(opt);
                      }}
                    >
                      <span>{Object.values(opt).join(" - ")}</span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  }
  return;
};

const ChoosePreImportTableFromSibling = (props) => {
  const {
    label,
    optionslabel,

    fieldPath,
    valuePath,
    masterTables,

    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;

  const { version_id } = useParams();
  const _token = localStorage.getItem("_token");
  const { tables, proxy } = useSelector((state) => state);

  const [drop, setDrop] = useState(false);
  const [optionDrop, setOptionDrop] = useState(false);

  const [fTable, setFTable] = useState(undefined);

  const [options, setOptions] = useState([]);

  useEffect(() => {
    const InitFunc = async () => {
      const field = getPropByPath(fieldPath.split("."), selectedCpn);
      const { table_id } = field;

      if (table_id) {
        const table = tables.find((tb) => tb.id == table_id);
        setFTable(table);
        updateSelectedComponent(field, fieldPath.split("."));
        updateSelectedComponent({}, valuePath.split("."));

        setDrop(false);

        const res = await fetch(
          `${proxy}/db/preimport/${version_id}/${table.id}`,
          {
            headers: {
              Authorization: _token,
            },
          }
        );
        const data = await res.json();
        setOptions(data.data);
      }
    };
    InitFunc();
    return () => {};
  }, []);

  const fieldClickTrigger = async (field) => {
    const { table_id } = field;
    const table = tables.find((tb) => tb.id == table_id);
    setFTable(table);
    updateSelectedComponent(field, fieldPath.split("."));
    updateSelectedComponent({}, valuePath.split("."));

    setDrop(false);

    const res = await fetch(`${proxy}/db/preimport/${version_id}/${table.id}`, {
      headers: {
        Authorization: _token,
      },
    });
    const data = await res.json();
    setOptions(data.data);
  };

  const currentField = getPropByPath(fieldPath.split("."), selectedCpn);
  const currentValue = getPropByPath(valuePath.split("."), selectedCpn);
  const fields = [];
  const parentTables = getPropByPath(masterTables.split("."), selectedCpn);
  parentTables.map((tb) => {
    const { foreign_keys } = tb;

    const foreignKeyFieldsID = foreign_keys.map((key) => key.field_id);
    const thisTableFields = Object.values(tb.fields);
    const foreignFields = thisTableFields
      .filter((f) => foreignKeyFieldsID.indexOf(f.id) != -1)
      .map((field) => {
        const { id } = field;
        const corespondingKey = foreign_keys.find((key) => key.field_id == id);

        const foreignTable = tables.find(
          (tbl) => tbl.id == corespondingKey.table_id
        );

        if (foreignTable.pre_import) {
          return {
            ...field,
            table_id: corespondingKey.table_id,
            onTable: tb.id,
          };
        }
      })
      .filter((f) => f != undefined);

    fields.push(...foreignFields);
  });

  const valueClickTrigger = (opt) => {
    updateSelectedComponent(opt, valuePath.split("."));
    setOptionDrop(false);
  };

  return (
    <div>
      <div className="property" style={{ zIndex: index + 1 }}>
        <div className="label-box">
          <span>{label}</span>
        </div>
        <div className={`drop-box`}>
          <div
            className="content-container"
            onClick={() => {
              setDrop(!drop);
            }}
          >
            <div className="content">
              <span>{currentField.field_name}</span>
            </div>
            <div className="caret">
              <FontAwesomeIcon icon={faCaretDown} />
            </div>
          </div>
          <div
            className="options-container"
            style={{ display: drop ? "block" : "none" }}
          >
            <div className="options">
              {fields.map((opt) => (
                <div
                  className="option"
                  onClick={() => {
                    fieldClickTrigger(opt);
                  }}
                >
                  <span>{opt["field_name"]}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {fTable && (
        <div className="property" style={{ zIndex: index }}>
          <div className="label-box">
            <span>{optionslabel}</span>
          </div>
          <div className={`drop-box`}>
            <div
              className="content-container"
              onClick={() => {
                setOptionDrop(!optionDrop);
              }}
            >
              <div className="content">
                <span>{Object.values(currentValue).join(" - ")}</span>
              </div>
              <div className="caret">
                <FontAwesomeIcon icon={faCaretDown} />
              </div>
            </div>
            <div
              className="options-container"
              style={{ display: optionDrop ? "block" : "none" }}
            >
              <div className="options">
                {options.map((opt) => (
                  <div
                    className="option"
                    onClick={() => {
                      valueClickTrigger(opt);
                    }}
                  >
                    <span>{Object.values(opt).join(" - ")}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const PickDetailSingleProperty = (props) => {
  const {
    label,
    type,
    masterpath,
    path,
    display_field,

    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;

  const { tables, selectedCpns } = useSelector((state) => state);
  const allDetailBoxes = selectedCpns.filter(
    (block) => block.name == "detail_box"
  );
  const nearestDetailBox = allDetailBoxes.pop();
  const currentValue = getPropByPath(path.split("."), selectedCpn);
  const [option, setOption] = useState(currentValue);

  useEffect(() => {
    setOption(currentValue);
  }, [selectedCpn.id]);

  function handleChangeOption(value) {
    updateSelectedComponent(value, path.split("."));
    setOption(value);
  }
  if (nearestDetailBox) {
    // const options = getPropByPath(masterpath.split("."), nearestDetailBox);
    const options = [];

    for (const k in nearestDetailBox.props.joiningTable.select_root) {
      options.push({
        label: k,
        value: k,
      });
    }

    return (
      <Select
        value={option}
        onChange={(value) => {
          handleChangeOption(value);
        }}
        options={options}
      />
    );
    return (
      <div className="property" style={{ zIndex: index }}>
        <div className="label-box">
          <span>{label}</span>
        </div>
        <div className={`drop-box`}>
          <div className="content-container" onClick={() => {}}>
            <div className="content">
              <span>{currentValue?.[display_field]}</span>
            </div>
            <div className="caret">
              <FontAwesomeIcon icon={faCaretDown} />
            </div>
          </div>
          <div className="options-container">
            <div className="options"></div>
          </div>
        </div>
      </div>
    );
  }
  return;
};

const PickDetailSinglePropertyButOnlyNonMultipleFileType = (props) => {
  const {
    label,
    type,
    masterpath,
    path,
    display_field,

    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;

  const { tables, selectedCpns } = useSelector((state) => state);
  const allDetailBoxes = selectedCpns.filter(
    (block) => block.name == "detail_box"
  );
  const nearestDetailBox = allDetailBoxes.pop();
  const [drop, setDrop] = useState(false);

  const clickTrigger = (opt) => {
    updateSelectedComponent(opt, path.split("."));
    setDrop(false);
  };

  if (nearestDetailBox) {
    const options = getPropByPath(masterpath.split("."), nearestDetailBox);
    const filtedOptions = options.filter((field) => {
      const { DATATYPE, FILE_MULTIPLE } = field.props ? field.props : {};
      if (DATATYPE == "FILE" && !FILE_MULTIPLE) {
        return true;
      }
      return false;
    });
    const currentValue = getPropByPath(path.split("."), selectedCpn);

    return (
      <div className="property" style={{ zIndex: index }}>
        <div className="label-box">
          <span>{label}</span>
        </div>
        <div className={`drop-box`}>
          <div
            className="content-container"
            onClick={() => {
              setDrop(!drop);
            }}
          >
            <div className="content">
              <span>{currentValue?.[display_field]}</span>
            </div>
            <div className="caret">
              <FontAwesomeIcon icon={faCaretDown} />
            </div>
          </div>
          <div
            className="options-container"
            style={{ display: drop ? "block" : "none" }}
          >
            <div className="options">
              {filtedOptions.map((opt) => (
                <div
                  className="option"
                  onClick={() => {
                    clickTrigger(opt);
                  }}
                >
                  <span>{opt[display_field]}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }
  return;
};

const PickDetailSinglePropertyButOnlyMultipleFileType = (props) => {
  const {
    label,
    type,
    masterpath,
    path,
    display_field,

    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;

  const { tables, selectedCpns } = useSelector((state) => state);
  const allDetailBoxes = selectedCpns.filter(
    (block) => block.name == "detail_box"
  );
  const nearestDetailBox = allDetailBoxes.pop();
  const [drop, setDrop] = useState(false);

  const clickTrigger = (opt) => {
    updateSelectedComponent(opt, path.split("."));
    setDrop(false);
  };

  if (nearestDetailBox) {
    const options = getPropByPath(masterpath.split("."), nearestDetailBox);
    const filtedOptions = options.filter((field) => {
      const { DATATYPE, FILE_MULTIPLE } = field.props ? field.props : {};
      if (DATATYPE == "FILE" && FILE_MULTIPLE) {
        return true;
      }
      return false;
    });
    const currentValue = getPropByPath(path.split("."), selectedCpn);

    return (
      <div className="property" style={{ zIndex: index }}>
        <div className="label-box">
          <span>{label}</span>
        </div>
        <div className={`drop-box`}>
          <div
            className="content-container"
            onClick={() => {
              setDrop(!drop);
            }}
          >
            <div className="content">
              <span>{currentValue?.[display_field]}</span>
            </div>
            <div className="caret">
              <FontAwesomeIcon icon={faCaretDown} />
            </div>
          </div>
          <div
            className="options-container"
            style={{ display: drop ? "block" : "none" }}
          >
            <div className="options">
              {filtedOptions.map((opt) => (
                <div
                  className="option"
                  onClick={() => {
                    clickTrigger(opt);
                  }}
                >
                  <span>{opt[display_field]}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }
  return;
};

const LockButtons = (props) => {
  const {
    label,
    type,
    tablesPath,

    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
    index,
  } = props;

  const { tables } = useSelector((state) => state);

  const selectedTables = getPropByPath(tablesPath.split("."), selectedCpn);
  const selectedTable = selectedTables[0];
  if (selectedTable) {
    const { foreign_keys } = selectedTable;
    const preImportTables = [];
    for (let i = 0; i < foreign_keys.length; i++) {
      const { field_id, table_id } = foreign_keys[i];

      const foreignTable = tables.find((tb) => tb.id == table_id);

      if (foreignTable && foreignTable.pre_import) {
        const field = selectedTable.fields.find((f) => f.id == field_id);
        preImportTables.push({ field, foreignTable });
      }
    }

    if (preImportTables.length > 0) {
      return (
        <div className="property" style={{ zIndex: index }}>
          <div className="label-box">
            <span>{label}</span>
          </div>
          <div className={`drop-box`}>
            {preImportTables.map((tb) => (
              <PreImportLockButtonSelection
                {...props}
                table={tb.foreignTable}
                field={tb.field}
              />
            ))}
          </div>
        </div>
      );
    }
  }
  return;
};

const PreImportLockButtonSelection = (props) => {
  /**
   *
   *  Tiếp tục phân tích preimport và gọi nút từ children
   *
   */

  const { proxy, icons } = useSelector((state) => state);

  const { version_id } = useParams();
  const _token = localStorage.getItem("_token");
  const buttons_for_blocking = {
    code_generating_button: "code_generating_button",
    custom_button: "custom_button",
    redirect_button: "redirect_button",
    table_export_button: "table_export_button",
  };
  const {
    table,
    field,
    lockpath,

    getPropByPath,
    updateSelectedComponent,
    selectedCpn,
  } = props;

  const lockbuttons = getPropByPath(lockpath.split("."), selectedCpn);
  const thisFieldConfig = lockbuttons[field.fomular_alias];

  const { children } = selectedCpn;

  const [preImportData, setPreImportData] = useState([]);

  const buttons = children.filter((cpn) => buttons_for_blocking[cpn.name]);
  console.log("buttons", buttons);
  const { primary_key, fields } = table;
  const primaryField = fields.find((f) => f.id == primary_key[0]);

  useEffect(() => {
    const asyncFetchingFunc = async () => {
      const res = await fetch(
        `${proxy}/db/preimport/${version_id}/${table.id}`,
        {
          headers: {
            Authorization: _token,
          },
        }
      );
      const data = await res.json();
      setPreImportData(data.data);
    };

    asyncFetchingFunc();
    return () => {};
  }, []);

  const checkTrigger = (data, btn) => {
    const config = thisFieldConfig;
    let newConfig = thisFieldConfig;
    if (config) {
      const thisButtonConfig =
        thisFieldConfig[data[primaryField.fomular_alias]];
      if (thisButtonConfig) {
        thisFieldConfig[data[primaryField.fomular_alias]][btn.id] =
          !thisFieldConfig[data[primaryField.fomular_alias]][btn.id];
      } else {
        thisFieldConfig[data[primaryField.fomular_alias]] = { [btn.id]: true };
      }
      newConfig = thisFieldConfig;
    } else {
      newConfig = { [data[primaryField.fomular_alias]]: { [btn.id]: true } };
    }
    console.log(newConfig);
    updateSelectedComponent(newConfig, [
      "props",
      "lockbuttons",
      field.fomular_alias,
    ]);
  };

  const DefaultButtonSelection = (data, icon, name, value) => {
    return (
      <div className="field-picker" style={{ justifyContent: "flex-start" }}>
        <div className="picker-checkbox">
          <input
            type="checkbox"
            checked={
              thisFieldConfig?.[data[primaryField.fomular_alias]]?.[value]
            }
            onClick={() => {
              checkTrigger(data, { id: value });
            }}
          />
        </div>

        <div className="picker-label" style={{ margin: "0" }}>
          <FontAwesomeIcon icon={icon} />
        </div>

        <div className="picker-label" style={{ marginLeft: "1em" }}>
          <span>{name}</span>
        </div>
      </div>
    );
  };

  return (
    <div className={"fields-picker"}>
      {preImportData.map((data) => (
        <div className="table-fields-picker">
          <div className="fields-picker-header">
            <span
              style={{
                width: "100%",
                display: "block",
                overflow: "hidden",
                whiteSpace: "nowrap",
                textOverflow: "ellipsis",
                fontWeight: "normal",
              }}
            >
              {Object.values(data).join(" - ")}
            </span>
          </div>
          <div className="picker-field-list">
            {DefaultButtonSelection(
              data,
              faArrowUpRightFromSquare,
              "Chi tiết",
              "detail"
            )}
            {DefaultButtonSelection(data, faEdit, "Cập nhật", "update")}
            {DefaultButtonSelection(data, faTrash, "Xóa", "delete")}

            {buttons.map((btn) => {
              return (
                <div
                  className="field-picker"
                  style={{ justifyContent: "flex-start" }}
                >
                  <div className="picker-checkbox">
                    <input
                      type="checkbox"
                      checked={
                        thisFieldConfig?.[data[primaryField.fomular_alias]]?.[
                          btn.id
                        ]
                      }
                      onClick={() => {
                        checkTrigger(data, btn);
                      }}
                    />
                  </div>

                  <div className="picker-label" style={{ margin: "0" }}>
                    <FontAwesomeIcon
                      icon={icons[btn?.props?.icon]?.icon || icons["6"].icon}
                    />
                  </div>

                  <div className="picker-label" style={{ marginLeft: "1em" }}>
                    <span>{btn.props.name}</span>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      ))}
    </div>
  );
};

const Components = {
  text: EntryBox,
  pattern: PattenEntry,
  prefix: PrefixEntry,
  number: NumberBox,
  iconicSwitchingGroup: IconicSwitchingGroup,
  iconicSwitching: IconicSwitching,
  color: Color,
  bool: Bool,
  selection: ListSelection,
  childSelection: ChildSelection,
  apiSelection: ApiSelection,

  chart_selection: ChartSelection,
  selfSelection: SelfSelection,
  masterSelection: MasterSelection,
  icon: ButtonChangeIcon,

  SelectDisplayField: SelectDisplayField,
  selectTables: SelectTables, // onetimeuse
  SELECT_CHART_TYPES: SelectChartTypes,
  selectTable: SelectTable, // onetimeuse
  tablefieldspicker: TableFieldsPicker, // onetimeuse
  singulartablefieldspicker: SingularTableFieldsPicker, // onetimeuse
  tablecalculatefields: TableCalculateFields, // onetimeuse
  primaryTableOnlyBool: PrimaryTableOnlyBool, // onetimeuse
  singleFieldSelection: SingleFieldSelection,
  selectParams: SelectParams,
  selectPage: SelectPage,
  showParams: ShowParams, // onetimeuse
  chooseSlave: ChooseSlave,
  chooseMaster: ChooseMaster,
  JoiningTable: JoiningTable,
  SelectCriteria: SelectCriteria,
  choosePreImportTable: ChoosePreImportTable,
  choosePreImportTableFromSibling: ChoosePreImportTableFromSibling,
  LinkCharts: LinkCharts,
  SelectDisplayFields: SelectDisplayFields,

  pickdetailsingleproperty: PickDetailSingleProperty,
  pickdetailsinglepropertybutonlynonmultiplefiletype:
    PickDetailSinglePropertyButOnlyNonMultipleFileType, // onetimeuse
  pickdetailsinglepropertybutonlymultiplefiletype:
    PickDetailSinglePropertyButOnlyMultipleFileType, // onetimeuse
  lockbuttons: LockButtons, // onetimeuse
};
